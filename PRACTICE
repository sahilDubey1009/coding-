###typecastinginpython###
a=3
print(a,type(a)
b=float(a)
print(b,type(b)

##int to complex###
a=33
print(a,type(a)
b=complex(a)
print(b,type(b)


#if statement
marks=92
if marks>=90:
    print('you will get mobile phone')
   print ("thank you")
 if else
  
  marks  =  87
if marks >=90:
     print("you will get a phone")     
     
         print("no phone for 1 week")
         print("thank you")

         
if elif statement
marks=55
if marks>=90:
    print("you will go for a trip")
elif marks>=80 and marks<=90:
    print('you will get a phone')
else:
    print('no phone till one month')



    marks = 97
if marks>=90:
    print("you will go to trip")
elif marks >=80 and marks <90:
        print("you will get a new phone")
elif marks >=70 and marks <80:
            print("you will get a book")
else:
                print("you have to give your phn back")

#write a program to check whether a passed letter is vowel or not

letter=input("enter a number here")
if letter in "a e i o u ":
    print ("it is a vowel")
else:
    print("it is not a vowel")

#for loop
for i in range (1,6):
    print ("hello brother")



#write a program to check if a number is a single digit number or #upto 5 digit number

num = int(input("enter a number here upto 5 digit: "))
if num>=0 and num <=9:
    print("it is a single digit number")
elif num>=10 and num <=99:
    print("it is a double digit number")
elif num>=100 and num <=999:
    print("it is a triple digit number")
elif num>1000 and num <=9999:
    print("it is a four digit number")
else:
    print("it is five or more digit number")


#swap case 
a=30
b=40
a,b=b,a
print(b)
print(a)

o="sahil"
b="dubey"
o,b=b,o
print(o)
print(b)

#area of square 
side = float(input("Enter the length of a side of the square: "))
area = side**2
print(f"The area of the square is: area")

#area of rectangle

length=float(input("enter the length"))
width =float(input("enter the width"))
area=length*width
print("the area of rectangle, :area")

#area of rectangle

length=float(input("enter the length"))
width =float(input("enter the width"))
area=length*width
print("the area of rectangle, :area")

#area of circle

radius = float(input("enter the radius"))
area=radius**2
print("enter the area of circle,:area")


#logical operator
a = 10
b = 5
c = 20

print(a > b and c > a)

print(a > b or c < a)

print(not (a > b))

#and logical operator
a=10
b=5
c=20
print(a>b and c>a)#both should be true
#or logical operator
a=66
b=8
c=77
print(a>b or c<a)#only one can be true
#not logical operator
a=99
b=55
c=9
print(not(a>b))#shows opposite result#shows true if it is false

#swap using 3rd variable
a=10
b=20

print("Berfore Swapping: A:",a," B:",b)
temp=a #temp=10
a=b  #a=20
b=temp  #b=10
print("After Swapping: A:",a," B:",b)

#lists in python 
#List items are ordered, changeable, and allow duplicate value
#When we say that lists are ordered, it means that the items have a defined order, and that order will not change.

#If you add new items to a list, the new items will be placed at the end of the list.

a= ["apple", "banana", "cherry"]
print(a)
#What will be the result of the following syntax:
mylist = ['apple', 'banana', 'cherry']
print(mylist[1])
#output
banana
#What will be the result of the following syntax:
mylist = ['apple', 'banana', 'banana', 'cherry']
print(mylist[2])
#output
banana
#Select the correct function for returning the number of items in a list:

thislist = ['apple', 'banana', 'cherry']
print(len(thislist))

#PYTHON ACCESS LISTS

#What will be the result of the following syntax:
mylist = ['apple', 'banana', 'cherry']
print(mylist[-1])
#output
cherry

#Print the second item in the fruits list.

fruits = ["apple", "banana", "cherry"]
print(fruits[1])

#What will be the result of the following syntax:
mylist = ['apple', 'banana', 'cherry', 'orange', 'kiwi']
print(mylist[1:4])
#output
['banana', 'cherry', 'orange']

#Use a range of indexes to print the third, fourth, and fifth item in the list.


fruits = ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]
print(fruits[2:5])
#output
['cherry', 'orange', 'kiwi']

#PYTHON CHANGE LISTS

#What will be the result of the following syntax:
mylist = ['apple', 'banana', 'cherry']
mylist[0] = 'kiwi'
print(mylist[1])
#output
banana

#What will be the result of the following syntax:
mylist = ['apple', 'banana', 'cherry']
mylist[1:2] = ['kiwi', 'mango']
print(mylist[2])
#output
mango
#if else statements
num = int(input("Enter a number: "))
if num % 2 == 0:
    print("Even number")
else:
    print("Odd number")

    age = int(input("Enter your age: "))
if age >= 18:
    print("Eligible to vote")
else:
    print("Not eligible to vote")

    #oops 
    #class/object
   # Create an object of MyClass called p1:
class MyClass:
  x = 5
p1=MyClass()

# Use the p1 object to print the value of x:
class MyClass:
  x = 5

p1 = MyClass()
print(p1.x)

# Insert the missing parts to make the code return: John(36):
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def __str__(self):
        return f'{self.name}({self.age}):'

# Example usage:
p1 = Person('John', 36)
print(p1)

# When the class object is represented as a string, there is a function that controls what should be returned, which one?
_str__()

# What is a correct syntax for deleting an object named person in Python?
del person

# if else 
What will be the result of the following code:
x = 5
y = 8
if x > y:
  print('Hello')
else:
  print('Welcome')
  #o/p
  welcome
  
 # Print "Hello World" if a is greater than b.
a = 50
b = 10
if a > b:

  print("Hello World")

#  Print "Hello World" if a is not equal to b.
a = 50
b = 10
if a != b:

  print("Hello World")

# Print "Yes" if a is equal to b, otherwise print "No".

a = 50
b = 10
if a == b:
  print("Yes")
else:
  print("No")

#  Print "1" if a is equal to b, print "2" if a is greater than b, otherwise print "3".
a = 50
b = 10
if a == b :

  print("1")
elif  a > b :
 
  print("2")
else:

  print("3")
# create a class named person,use __init__() function to assin value for name , age
 class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

p1 = Person("John", 36)

print(p1.name)
print(p1.age)

# OUTPUT
JOHN , 36

# The string representation of an object WITH the __str__() function:
class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

  def __str__(self):
    return f"{self.name}({self.age})"    

p1 = Person("John", 36)

print(p1)

#  types of inheritance
# single inheritance
class Parent:
    def show(self):
        print("This is the parent class")

class Child(Parent):  # Inheriting Parent class
    def display(self):
        print("This is the child class")

obj = Child()
obj.show()   # Inherited method
obj.display()

# output
This is the parent class
This is the child class

# multiple inheritance

class Parent1:
    def feature1(self):
        print("Feature from Parent1")

class Parent2:
    def feature2(self):
        print("Feature from Parent2")

class Child(Parent1, Parent2):  # Inheriting from both parents
    def feature3(self):
        print("Feature from Child")

obj = Child()
obj.feature1()
obj.feature2()
obj.feature3()

# output
Feature from Parent1
Feature from Parent2
Feature from Child

# Exit the loop when x is "banana", but this time the break comes before the print:

fruits = ["apple", "banana", "cherry"]
for x in fruits:
  if x == "banana":
    break
  print(x)

 # Do not print banana:

fruits = ["apple", "banana", "cherry"]
for x in fruits:
  if x == "banana":
    continue
  print(x)

# Print all numbers from 0 to 5, and print a message when the loop has ended:

for x in range(6):
  print(x)
else:
  print("Finally finished!")

# Break the loop when x is 3, and see what happens with the else block:

for x in range(6):
  if x == 3: break
  print(x)
else:
  print("Finally finished!")

  # Print i as long as i is less than 6:

i = 1
while i < 6:
  print(i)
  i += 1
  
  # 
  Print a message once the condition is false:

i = 1
while i < 6:
  print(i)
  i += 1
else:
  print("i is no longer less than 6")

# inheritance in python

# Parent class
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def display_info(self):
        print(f"Name: {self.name}")
        print(f"Age: {self.age}")

# Child class
class Student(Person):
    def __init__(self, name, age, student_id):
        # Call the constructor of the parent class
        super().__init__(name, age)
        self.student_id = student_id

    def display_student_info(self):
        # Call the method from the parent class
        self.display_info()
        print(f"Student ID: {self.student_id}")

  # polymorphism 
  class Animal:
    def speak(self):
        print("The animal makes a sound.")

class Dog(Animal):
    def speak(self):
        print("The dog barks.")

class Cat(Animal):
    def speak(self):
        print("The cat meows.")

# Function that takes any Animal and calls speak
def make_animal_speak(animal):
    animal.speak()

# Create objects
animal1 = Dog()
animal2 = Cat()

# Call the same function with different objects
make_animal_speak(animal1)  # Output: The dog barks.
make_animal_speak(animal2)  # Output: The cat meows.

# COUNTDOWN TIMER

import time
seconds=int(input("enter the time in seconds"))
while seconds>0:
    print(f"Time left:{seconds}seconds")
    time.sleep(1)
    seconds-=1
    print("Time's upo!")

# boolean in python
x = "Hello"
y = 15

print(bool(x))
print(bool(y))

# using if else
def myFunction() :
  return True

if myFunction():
  print("YES!")
else:
  print("NO!")

# string length
a = "Hello, World!"
print(len(a))

SQL STARTS

CREATE DATABASE MYDATABASE;
drop database mydatabase;

use mydatabase;

CREATE TABLE titanic (

PassengerID int primary key, 
Name varchar(100), 
Sex varchar(50), 
Age int, 
Pclass int, 
Survived int , 
Fare int, 
Embarked varchar(5)
);

INSERT into titanic values(1, 'Braund, Mr. Owen Harris', 'male', 22, 3, 0, 7.25, 'S');
INSERT into titanic values(2, 'Cumings, Mrs. John Bradley (Florence Briggs Thayer)', 'female', 38, 1, 1, 71.2833, 'C');
INSERT into titanic values(3, 'Heikkinen, Miss. Laina', 'female', 26, 3, 1, 7.925, 'S');
INSERT into titanic values(4, 'Futrelle, Mrs. Jacques Heath (Lily May Peel)', 'female', 35, 1, 1, 53.1, 'S');
INSERT into titanic values(5, 'Allen, Mr. William Henry', 'male', 35, 3, 0, 8.05, 'S');
INSERT into titanic values(6, 'Moran, Mr. James', 'male', NULL, 3, 0, 8.4583, 'Q');
INSERT into titanic values(7, 'McCarthy, Mr. Timothy J', 'male', 54, 1, 0, 51.8625, 'S');
INSERT into titanic values(8, 'Palsson, Master. Gosta Leonard', 'male', 2, 3, 0, 21.075, 'S');
INSERT into titanic values(9, 'Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)', 'female', 27, 3, 1, 11.1333, 'S');
INSERT into titanic values(11, 'Sandstrom, Miss. Marguerite Rut', 'female', 4, 3, 1, 16.7, 'S');
INSERT into titanic values(12, 'Bonnell, Miss. Elizabeth', 'female', 58, 1, 1, 26.55, 'S');
INSERT into titanic values(13, 'Saundercock, Mr. William Henry', 'male', 20, 3, 0, 8.05, 'S');
INSERT into titanic values(14, 'Andersson, Mr. Anders Johan', 'male', 39, 3, 0, 31.275, 'S');
INSERT into titanic values(15, 'Vestrom, Miss. Hulda Amanda Adolfina', 'female', 14, 3, 0, 7.8542, 'S');
INSERT into titanic values(16, 'Hewlett, Mrs. (Mary D Kingcome)', 'female', 55, 2, 1, 16.0, 'S');
INSERT into titanic values(17, 'Rice, Master. Eugene', 'male', 2, 3, 0, 29.125, 'Q');
INSERT into titanic values(18, 'Williams, Mr. Charles Eugene', 'male', NULL, 2, 0, 13.0, 'S');
INSERT into titanic values(19, 'Vander Planke, Mrs. Julius (Emelia Maria Vandemoortele)', 'female', 31, 3, 0, 18.0, 'S');
INSERT into titanic values(20, 'Masselmani, Mrs. Fatima', 'female', NULL, 3, 0, 7.225, 'C');

4) Print ALL DATA 
SELECT * FROM Titanic;


5) Filtering with WHERE
-- All female passengers who survived

SELECT Name, Age FROM Titanic
WHERE Sex = 'female' and (Survived = 1 or Pclass = 1);

-- Passengers older than 30

SELECT PassengerID, Name, Age FROM Titanic
WHERE Age > 30;

---/---------/---------/--------/---------/---------/---

6) Sorting with ORDER BY
-- Top 5 highest fares
SELECT Name, Fare FROM Titanic
ORDER BY Fare DESC
LIMIT 5;

---/---------/---------/--------/---------/---------/---

7) Insert New Row
-- Average age of all passengers
SELECT AVG(Age) AS AverageAge FROM Titanic;

-- Count of survivors by class
SELECT Pclass, COUNT(*) AS TotalSurvivors
FROM Titanic
WHERE Survived = 1
GROUP BY Pclass;

---/---------/---------/--------/---------/---------/---

8) Delete Row
-- Delete a row where Fare is less than 5
DELETE FROM Titanic
WHERE Fare < 5;

---/---------/---------/--------/---------/---------/---

9) Update Existing Row

Syntax= 
UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;

-- Update age of passenger ID 6
UPDATE Titanic
SET Age = 30
WHERE PassengerID = 6;

---/---------/---------/--------/---------/---------/---

10) Handling NULL Values
-- Select passengers with unknown age
SELECT * FROM Titanic
WHERE Age IS NULL;

-- Replace NULL ages with average age
UPDATE Titanic
SET Age = (SELECT AVG(Age) FROM Titanic WHERE Age IS NOT NULL)
WHERE Age IS NULL;

---/---------/---------/--------/---------/---------/---

CREATE DATABASE STUDENTS;
drop database students;
use mydatabase;
CREATE TABLE Customers (
    Customer_ID INT PRIMARY KEY,
    Name VARCHAR(100),
    Email VARCHAR(100),
    Gender VARCHAR(10),
    City VARCHAR(50),
    Phone VARCHAR(20),
    RegistrationDate DATE
);
drop table Customers;

    INSERT into Customers ( Customer_ID, Name, Email, Gender, City, Phone, RegistrationDate ) values
    (1, "Amit Sharma", "amit.sharma@gmail.com", "Male", "Delhi", "9876543210", "2024-01-15"),
    (2, "Priya Singh", "priya.singh@yahoo.com", "Female", "Mumbai", "9823456789", "2024-02-10"),
	(3, "Ravi Verma", "ravi.v@gmail.com", "Male", "Lucknow", "9012345678", "2024-03-05"),
	(4, "Sneha Patil", "sneha.patil@hotmail.com", "Female", "Pune", "9765432109", "2024-01-25"),
    (5, "Ankit Mehra", "ankit.mehra@outlook.com", "Male", "Jaipur", "9934567810", "2024-02-22"),
    (6, "Riya Jain", "riya.jain@gmail.com", "Female", "Indore", "9845612378", "2024-03-15"),
	(7, "Deepak Joshi", "deepak.j@rediffmail.com", "Male", "Hyderabad", "9789012345", "2024-04-01"),
    (8, "Kavita Desai", "kavita.d@gmail.com", "Female", "Ahmedabad", "9876543012", "2024-04-05"),
    (9, "Manoj Kumar", "manoj.kumar@meesho.com", "Male", "Bangalore", "9912345670", "2024-02-18"),
    (10, "Pooja Shah", "pooja.shah@gmail.com", "Female", "Surat", "9998765432", "2024-03-28");

4) Print ALL DATA 
SELECT * FROM Customers;


CREATE DATABASE COLLEGE;
DROP DATABASE COLLEGE;
use COLLEGE;

CREATE TABLE STUDENTS(
ID INT PRIMARY KEY,
NAME VARCHAR (50),
AGE INT NOT NULL
);
DROP TABLE STUDENTS;

INSERT INTO STUDENTS values ( 1,"AMAN",26);
INSERT INTO STUDENTS values ( 2,"SHRADHA",24);

SELECT * FROM STUDENTS;

SHOW DATABASES;

CREATE TABLE STUDENTS (
rollno INT PRIMARY KEY,
name VARCHAR(50)
);

SELECT * FROM STUDENTS;

INSERT INTO STUDENTS
(rollno , name)
VALUES
( 101 , "KARAN"),
( 102 , "ARJUN"),
( 103 , "RAM");

INSERT INTO STUDENTS
(rollno , name)
VALUES
( 104 , "SHYAM");


CREATE TABLE t1 (
id int not null,
primary key (id)
);

INSERT INTO t1 VALUES(101);
INSERT INTO t1 VALUES(101);

SELECT * FROM t1;

create table emp (
id int ,
salary int  default 25000); 

INSERT INTO emp (id)values (101);
select * from emp

CREATE DATABASE XYZ;
USE XYZ;

CREATE TABLE EMPLOYEE(
ID INT PRIMARY KEY,
NAME VARCHAR(50),
SALARY int
);

INSERT INTO EMPLOYEE
(ID,NAME,SALARY)
VALUES

(1,"ADAM",25000),
(2,"BOB",30000),
(3,"CASEY",40000);

SELECT * FROM EMPLOYEE;

create database if not exists college;
use college ; 
create table student (
rollno int primary key,
name varchar (20),
marks int not null,
grade varchar(1),
city varchar (20)
);
 
INSERT INTO student 
(rollno, name, marks, grade, city)
VALUES
(101, 'anil', 78, 'c', 'pune'),
(102, 'bhumika', 93, 'a', 'mumbai'),
(103, 'chetan', 85, 'b', 'mumbai'),
(104, 'dhruv', 96, 'a', 'delhi'),
(105, 'emanuel', 12, 'f', 'delhi'),
(106, 'farah', 82, 'b', 'delhi');

select distinct city from student ;

select * from student where marks = 93;
select * from student where city = "mumbai";
select * from student where city not in ("delhi","mumbai");
select * from student limit 2;
select * from student order by marks desc ;
select * from student order by marks desc limit 3;
select sum(marks) from student;
select count(name) from student;
select city , count(name) from student group by city;

# write a query to find avg marks in each city in ascending order

select city,avg(marks)
from student 
group by city
order by city;

select city
from student
where grade= 'A'
group by city
having max(marks) >= 93
order by city asc;

|||UPDATE|||

update student
set grade = 'o'
where grade = 'A';

set sql_safe_updates = 0 ;

select * from student;

update student 
set grade = "B" 
where marks between 80 and 90 ;

update student
set marks = 23
where marks = 83;

update student 
set marks = marks +1;

||| DELETE |||

delete from student
where marks < 33;


@@@@ MACHINE LEARNING'''

KNN.ipynb
KNN.ipynb_

[ ]
import numpy as np
from sklearn.neighbors import NearestNeighbors
import pandas as pd

[ ]
# 1️⃣ Create sample user-item interaction data
data = {
    'User': ['A', 'A', 'B', 'B', 'C', 'C', 'D', 'D', 'E'],
    'Product': ['Laptop', 'Mouse', 'Laptop', 'Keyboard', 'Mouse', 'Keyboard', 'Laptop', 'Mouse', 'Keyboard'],
    'Rating': [5, 3, 4, 4, 2, 5, 4, 2, 5]
}

[ ]
df = pd.DataFrame(data)
df.head(5)


[ ]
# 2️⃣ Create user-item matrix
user_item_matrix = df.pivot_table(index='User', columns='Product', values='Rating').fillna(0)

print("\nUser-Item Matrix:")
print(user_item_matrix)

User-Item Matrix:
Product  Keyboard  Laptop  Mouse
User                            
A             0.0     5.0    3.0
B             4.0     4.0    0.0
C             5.0     0.0    2.0
D             0.0     4.0    2.0
E             5.0     0.0    0.0

[ ]
# 3️⃣ Train KNN
model_knn = NearestNeighbors(metric='cosine', algorithm='brute')
model_knn.fit(user_item_matrix)


[ ]
# 4️⃣ Recommendation function
def recommend_products(target_user, n_neighbors=2):
    print(f"\nRecommendations for User: {target_user}")

    user_index = user_item_matrix.index.get_loc(target_user)
    distances, indices = model_
    knn.kneighbors(user_item_matrix.iloc[user_index, :].values.reshape(1, -1), n_neighbors=n_neighbors+1)

    similar_users = [user_item_matrix.index[i] for i in indices.flatten() if user_item_matrix.index[i] != target_user]
    print(f"Similar Users: {similar_users}")

    # Products the target user has already interacted with
    target_user_products = set(df[df['User'] == target_user]['Product'].values)

    # Collect products from similar users
    recommended_products = set()
    for user in similar_users:
        user_products = set(df[df['User'] == user]['Product'].values)
        recommended_products.update(user_products - target_user_products)

    if recommended_products:
        print("Recommended Products:", recommended_products)
    else:
        print("No new recommendations. User has similar preferences to neighbors.")

[ ]
# 5️⃣ Test the recommendation system
recommend_products('C')
recommend_products('A')
recommend_products('E')


[ ]

Start coding or generate with AI.

[ ]

Start coding or generate with AI.

[ ]

Start coding or generate with AI.
EG = 2) k-NN Classification on Wine Quality (Real-world dataset)
0-5 = Low

6 = Medium

7-10 = High


[ ]
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
Load dataset

[ ]
df = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv', sep=';')
Create quality category

[ ]
def quality_category(q):
    if q <= 5:
        return 0  # Low
    elif q == 6:
        return 1  # Medium
    else:

        return 2  # High

df['quality_cat'] = df['quality'].apply(quality_category)
.# Features and target


[ ]
X = df.drop(['quality', 'quality_cat'], axis=1)
y = df['quality_cat']


# Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

[ ]
# Scale
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
k-NN Classifier

[ ]
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train_scaled, y_train)

New prediction

[ ]
new_wine = pd.DataFrame({
    'fixed acidity': [7.4],
    'volatile acidity': [7.7],
    'citric acid': [6],
    'residual sugar': [15.9],
    'chlorides': [87.076],
    'free sulfur dioxide': [11],
    'total sulfur dioxide': [34],
    'density': [32.9978],
    'pH': [3.51],
    'sulphates': [0.56],
    'alcohol': [40.4]
})

[ ]
new_wine_scaled = scaler.transform(new_wine)
prediction = knn.predict(new_wine_scaled)

category_map = {0: 'Low', 1: 'Medium', 2: 'High'}
print(f"Predicted wine quality category: {category_map[prediction[0]]}")
Predicted wine quality category: Low

[ ]

Start coding or generate with AI.

[ ]

Start coding or generate with AI.

[ ]

Start coding or generate with AI.
EG = 3) k-NN Regression on Wine Quality (Real-world dataset)

[ ]
from sklearn.neighbors import KNeighborsRegressor

[ ]
df = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv', sep=';')

def quality_category(q):
    if q <= 5:
        return 0  # Low
    elif q == 6:
        return 1  # Medium
    else:
        return 2  # High

df['quality_cat'] = df['quality'].apply(quality_category)

df.head(16)

Features and target

[ ]
X = df.drop(['quality', 'quality_cat'], axis=1)
y = df['quality']

[ ]
# Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.42, random_state=42)

# Scale
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
k-NN Regressor

[ ]
knn_reg = KNeighborsRegressor(n_neighbors=5)
knn_reg.fit(X_train_scaled, y_train)

New prediction

[ ]
predicted_quality = knn_reg.predict(new_wine_scaled)

scikit learn algorithm
from sklearn.tree import DecisionTreeClassifier

features = [
    [150, 0],
    [170, 0],
    [130, 1],
    [120, 1],
]

labels = ["apple","apple","orange","orange"]
clf = DecisionTreeClassifier()
clf = clf.fit(features, labels)
prediction = clf.predict([[150,1]])
